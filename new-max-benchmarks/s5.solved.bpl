procedure main() {
  var i,j,k: int;
  j := 0;
  i := 0;
  assume(k>=0);
  while (j < k)
invariant (i == i);
invariant (k == k);
invariant (j == j);
//invariant ((i == 0) || (i == 2));
//invariant ((0 <= i) && (i <= 63));
//invariant (i <= 2);
invariant ((i mod 2) == 0);
invariant (i >= 0);
invariant (i >= 0);
//invariant ((i == 0) || (i == 2));
invariant ((i mod 2) == 0);
//invariant (k == 1);
//invariant ((0 <= k) && (k <= 63));
//invariant (k != 0);
//invariant (k <= 1);
//invariant (k == 1);
invariant (k >= 0);
//invariant (k >= 1);
//invariant (k == 1);
//invariant ((k == 0) || (k == 1));
//invariant ((j == 0) || (j == 1));
//invariant ((0 <= j) && (j <= 63));
//invariant (j <= 1);
invariant (j >= 0);
invariant (j >= 0);
//invariant ((j == 0) || (j == 1));
//invariant ((j == 0) || (j == 1));
invariant ((((0 * i) + (0 * i)) + 0) == 0);
//invariant (i != k);
//invariant ((((0 * i) + (0 * k)) + 0) == 0);
invariant ((i == 0) ==> (j == 0));
invariant ((j == 0) ==> (i == 0));
invariant (i >= j);
invariant ((((0 * i) + (0 * j)) + 0) == 0);
//invariant (k == (k * k));
//invariant (k == (k * k));
invariant ((((0 * k) + (0 * k)) + 0) == 0);
invariant (k >= j);
invariant ((((0 * k) + (0 * j)) + 0) == 0);
//invariant (j == (j * j));
//invariant (j == (j * j));
//invariant ((((0 * j) + (0 * j)) + 0) == 0),33,(k >= k);
invariant ((((0 * i) + (0 * i)) + 0) == 0);
invariant ((((0 * i) + (0 * k)) + 0) == 0);
invariant (1 <= 1);
invariant (1 != 0);
invariant ((1 == 0) || (1 == 1));
invariant (1 >= 0);
invariant ((k == 0) || (k == k));
invariant (i != 1);
invariant ((j == 0) ==> (i == 0));
invariant ((((0 * k) + (0 * k)) + 0) == 0);
invariant ((((0 * i) + (0 * 1)) + 0) == 0);
invariant (j <= k);
invariant ((((0 * 1) + (0 * j)) + 0) == 0);
invariant (j == j);
invariant (1 == 1);
invariant (k <= k);
invariant ((i mod 2) == 0);
invariant (1 >= 1);
invariant ((((0 * k) + (0 * j)) + 0) == 0);
invariant (i >= 0);
invariant (k == k);
invariant (j >= 0);
invariant ((((0 * i) + (0 * j)) + 0) == 0);
invariant (k >= j);
invariant ((0 <= 1) && (1 <= 63));
invariant (i == i);
invariant (i >= j);
invariant (1 == (1 * 1));
invariant ((i == 0) ==> (j == 0));
invariant ((((0 * 1) + (0 * 1)) + 0) == 0);
invariant ((((0 * j) + (0 * j)) + 0) == 0);
invariant (k >= 0);
  //invariant i == 2* k*j;
  {
    i := i + 2* k;
    j := j + 1;
  }
  assert(i ==  2*k*j);
}
